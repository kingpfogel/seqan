template <unsigned>
struct KmerOffset {
    KmerOffset() {}
/*    KmerOffset & operator=(KmerOffset & other)
    {
        return *this;
    }

    KmerOffset & operator=(KmerOffset && other)
    {
        return *this;
    }
*/
    ~KmerOffset() = default;  

    std::vector<uint64_t> selectHelper(TString const & text, TShape kmerShape, TInt kmerSize, TInt2 offset)
    {
        uint16_t possible = length(text) - kmerSize + 1;
        uint16_t x = (length(text) - kmerSize) % offset;
        //uint16_t noOfKmerHashes = 1 + (length(text) - kmerSize + offset - x) / offset;
        uint16_t noOfKmerHashes = std::ceil((double)(length(text)-kmerSize+1)/offset);
        if (x != 0)
        {
            noOfKmerHashes += 1;
        }
        std::vector<uint64_t> kmerHashes(noOfKmerHashes, 0);
        
        //resizeShape(kmerShape) raus

        auto it = begin(text);
        hashInit(kmerShape, it);

        uint32_t c = 0;
        for (uint32_t i = 0; i < possible; ++i)
        {
            uint64_t kmerHash = hashNext(kmerShape, it);
            if(i-c*offset == 0)
            {
                if(c < ((length(text) - kmerSize + offset - x) / offset))
                {
                    kmerHashes[c] = kmerHash;
                }
                ++c;
            }
            if(i == possible-1u && x != 0u)
            {
                kmerHashes[c] = kmerHash;
            }
            ++it;
        }
        return kmerHashes;
    }


};
